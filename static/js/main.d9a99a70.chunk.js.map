{"version":3,"sources":["assets/img/Drawing.svg","assets/img/Support team.svg","assets/img/Design.svg","assets/img/Team.svg","components/UI/Init.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Init","scene","useRef","scenec","scener","useState","show","setShow","useEffect","localStorage","getItem","setItem","setTimeout","current","Parallax","className","ref","src","imgFirst","alt","data-depth","imgSecond","imgThird","title","Modal","onHide","dialogClassName","aria-labelledby","Image","team","roundedCircle","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,0RCsG5BC,MA7Ff,WACE,IAAMC,EAAQC,mBACRC,EAASD,mBACTE,EAASF,mBAHD,EAKUG,oBAAS,GALnB,mBAKPC,EALO,KAKDC,EALC,KA+Bd,OAxBAC,qBAAU,WACWC,aAAaC,QAAQ,cAEtCH,GAAQ,GAERE,aAAaE,QAAQ,aAAc,QAKrCC,YAAW,WACT,GAAGX,EAAMY,SAAWV,EAAOU,SAAWT,EAAOS,QAC1B,IAAIC,IAASb,EAAMY,SAClB,IAAIC,IAASX,EAAOU,SACpB,IAAIC,IAASV,EAAOS,WAIvC,OAGH,IAIA,6BACE,wBAAIE,UAAU,kEAAd,oBAGA,yBAAKA,UAAU,wBAEb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,wCAAwCC,IAAKf,GAC1D,yBAAKgB,IAAKC,IAAUC,IAAI,GAAGC,aAAW,UAG1C,yBAAKL,UAAU,YACb,yBAAKA,UAAU,wCAAyCC,IAAKb,GAC3D,yBAAKc,IAAKI,IAAWF,IAAI,GAAGC,aAAW,UAG3C,yBAAKL,UAAU,YACb,yBAAKA,UAAU,wCAAwCC,IAAKZ,GAC1D,yBAAKa,IAAKK,IAAUH,IAAI,GAAGC,aAAW,YAK9C,gCAAYL,UAAU,0BACpB,uBAAGA,UAAU,mDAAb,yFACA,4BAAQA,UAAU,qBAAlB,qBAAwD,0BAAMQ,MAAM,gBAAZ,kBAI1D,kBAACC,EAAA,EAAD,CACElB,KAAMA,EACNmB,OAAQ,kBAAMlB,GAAQ,IACtBmB,gBAAgB,YAChBC,kBAAgB,sCAGhB,kBAACC,EAAA,EAAD,CAAOX,IAAKY,IAAMC,eAAa,IAG/B,kBAACN,EAAA,EAAMO,KAAP,KACE,wBAAIhB,UAAU,2CAAd,cAGA,qbCxEKiB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9a99a70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Drawing.d29dd310.svg\";","module.exports = __webpack_public_path__ + \"static/media/Support team.f9252a3b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Design.ab180487.svg\";","module.exports = __webpack_public_path__ + \"static/media/Team.aedbc5d5.svg\";","import React, {useEffect, useRef, useState} from 'react';\nimport Parallax from 'parallax-js'\nimport {Modal, Image} from 'react-bootstrap'\n\nimport imgFirst from '../../assets/img/Drawing.svg'\nimport imgSecond from '../../assets/img/Support team.svg'\nimport imgThird from '../../assets/img/Design.svg'\nimport team from '../../assets/img/Team.svg'\n\nfunction Init() {\n  const scene = useRef();\n  const scenec = useRef();\n  const scener = useRef();\n\n  const [show, setShow] = useState(true);\n\n  useEffect(()=>{\n    const modalExist = localStorage.getItem(\"modalExist\");\n    if(modalExist){\n      setShow(false);\n    }else{\n      localStorage.setItem(\"modalExist\", \"true\");\n    }\n\n\n\n    setTimeout(()=>{\n      if(scene.current && scenec.current && scener.current){\n        const parallax = new Parallax(scene.current);\n        const parallaxc = new Parallax(scenec.current);\n        const parallaxr = new Parallax(scener.current);\n        debugger\n        //console.log(parallax);\n      }\n    }, 1000)\n    //inputScene.current\n    //new Parallax(inputScene)\n  },[])\n\n\n  return (\n    <div>\n      <h1 className=\"text-title color-main text-center font-weight-bold text-shadow\">\n        Book Interactive\n      </h1>\n      <div className=\"container-fluid mb-5\">\n\n        <div className=\"row mr-1 ml-1\">\n          <div className=\"col-md-4\" >\n            <div className=\"mt-2 mb-2 mr-2 ml-2 my-card-l my-card\" ref={scene}>\n              <img src={imgFirst} alt=\"\" data-depth=\"0.5\"/>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"mt-2 mb-2 mr-2 ml-2 my-card-c my-card\"  ref={scenec}>\n              <img src={imgSecond} alt=\"\" data-depth=\"0.5\"/>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"mt-2 mb-2 mr-2 ml-2 my-card-r my-card\" ref={scener}>\n              <img src={imgThird} alt=\"\" data-depth=\"0.5\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n      <blockquote className=\"blockquote text-center\">\n        <p className=\"lead mb-0 color-main font-weight-bold text-hand\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>\n        <footer className=\"blockquote-footer\">Someone famous in <cite title=\"Source Title\">Source Title</cite></footer>\n      </blockquote>\n\n\n      <Modal\n        show={show}\n        onHide={() => setShow(false)}\n        dialogClassName=\"modal-90w\"\n        aria-labelledby=\"example-custom-modal-styling-title\"\n      >\n\n        <Image src={team} roundedCircle/>\n\n\n        <Modal.Body>\n          <h1 className=\"color-main text-center font-weight-bold\">\n            Welcome!!!\n          </h1>\n          <p>\n            Ipsum molestiae natus adipisci modi eligendi? Debitis amet quae unde\n            commodi aspernatur enim, consectetur. Cumque deleniti temporibus\n            ipsam atque a dolores quisquam quisquam adipisci possimus\n            laboriosam. Quibusdam facilis doloribus debitis! Sit quasi quod\n            accusamus eos quod. Ab quos consequuntur eaque quo rem! Mollitia\n            reiciendis porro quo magni incidunt dolore amet atque facilis ipsum\n            deleniti rem!\n          </p>\n        </Modal.Body>\n      </Modal>\n\n    </div>\n\n  );\n}\n\nexport default Init;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Init from \"./components/UI/Init\";\n\nfunction App() {\n  return (\n    <div>\n      <Init/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}