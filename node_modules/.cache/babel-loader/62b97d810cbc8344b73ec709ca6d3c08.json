{"ast":null,"code":"var _jsxFileName = \"/Users/musicprogram/Documents/book interactive/src/components/games/memory_game/MemoryBoard.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../../../assets/css/memory-style.css';\nimport { imagesGame, imageFront, imagesGameEnglish } from '../../../data/memoryGameData';\nimport ModalFinish from \"../question/ModalFinish\";\nimport { useRecoilValue } from \"recoil\";\nimport { linksSvg } from \"../../../GlobalState\";\nimport Parallax from 'parallax-js';\nimport GameBoard from './GameBoard';\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\n\nfunction Memoryboard() {\n  const [imagesMemory, setImagesMemory] = useState([]);\n  const [image, setImage] = useState('');\n  const [hasFlippedCard, setHasFlippedCard] = useState(false);\n  const [firstCard, setFirstCard] = useState('');\n  const [firstEventCard, setFirstEventCard] = useState('');\n  const [firstSameCard, setFirstSameCard] = useState('');\n  const [secondCard, setSecondCard] = useState('');\n  const [countFinish, setCountFinish] = useState(6);\n  const [countTry, setCountTry] = useState(0);\n  const [show, setShow] = useState(true);\n  const links = useRecoilValue(linksSvg);\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n  const cardImg = useRef();\n  useEffect(() => {}, [countFinish]);\n  useEffect(() => {\n    if (cardImg.current) {\n      const parallax = new Parallax(cardImg.current);\n    }\n\n    setImage(imageFront);\n    let shuffle;\n\n    if (english) {\n      shuffle = imagesGameEnglish.sort(() => Math.random() - 0.5);\n    } else {\n      shuffle = imagesGame.sort(() => Math.random() - 0.5);\n    }\n\n    setImagesMemory(shuffle);\n  }, [english]);\n\n  const flipCard = e => {\n    e.currentTarget.classList.add('flip');\n    const currentTarget = e.currentTarget;\n    const currentCard = e.currentTarget.dataset.card;\n    const currentSame = e.currentTarget.dataset.same;\n    setFirstSameCard(e.currentTarget.dataset.same);\n    setFirstEventCard(e.currentTarget);\n\n    if (!hasFlippedCard) {\n      setHasFlippedCard(true);\n      setFirstCard(currentCard); //console.log(true, e.currentTarget)\n    } else {\n      setHasFlippedCard(false);\n      setSecondCard(currentCard); //console.log(firstCard, currentCard)\n\n      setCountTry(countTry + 1);\n      checkForMatch(firstCard, currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard);\n    }\n  };\n\n  const checkForMatch = (firstCard, currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard) => {\n    let isMatch = firstCard === currentCard && currentSame !== firstSameCard;\n    isMatch ? disabledCards(firstEventCard, e) : unFlipCards(firstEventCard, currentTarget);\n  };\n\n  const disabledCards = (firstEventCard, e) => {\n    // hay coincidencia\n    if (countFinish - 1 === 0) {\n      setTimeout(() => {\n        setCountFinish(countFinish - 1);\n      }, 1500);\n    } else {\n      setCountFinish(countFinish - 1);\n    }\n\n    firstEventCard.classList.add('inactive-card');\n    e.currentTarget.classList.add('inactive-card');\n  };\n\n  const unFlipCards = (firstEventCard, currentTarget) => {\n    setTimeout(() => {\n      firstEventCard.classList.remove('flip');\n      currentTarget.classList.remove('flip');\n    }, 1000);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animate__animated animate__fadeIn  animate__duration-3s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center text-capitalize mt-2 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `font-weight-bold text-title-span-title mr-2 \n         color-5\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, english ? 'Focus' : 'ConcÃ©ntrese')), /*#__PURE__*/React.createElement(CheckBoxLanguage, {\n    setEnglish: setEnglish,\n    english: english,\n    setShowMemory: setShowMemory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: cardImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    \"data-depth\": \"0.1\",\n    src: links[5].bannerMemory,\n    className: \"center-img-memory rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body-memory mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, showMemory && /*#__PURE__*/React.createElement(\"section\", {\n    className: \"memory-game animate__animated animate__fadeIn  animate__duration-3s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, imagesMemory.map((memory, i) => {\n    return /*#__PURE__*/React.createElement(GameBoard, {\n      flipCard: flipCard,\n      memory: memory,\n      image: image,\n      key: i,\n      i: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    });\n  })), countFinish === 0 && /*#__PURE__*/React.createElement(ModalFinish, {\n    howManyTimes: countTry,\n    show: show,\n    setShow: setShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Memoryboard;","map":{"version":3,"sources":["/Users/musicprogram/Documents/book interactive/src/components/games/memory_game/MemoryBoard.js"],"names":["React","useState","useEffect","useRef","imagesGame","imageFront","imagesGameEnglish","ModalFinish","useRecoilValue","linksSvg","Parallax","GameBoard","CheckBoxLanguage","Memoryboard","imagesMemory","setImagesMemory","image","setImage","hasFlippedCard","setHasFlippedCard","firstCard","setFirstCard","firstEventCard","setFirstEventCard","firstSameCard","setFirstSameCard","secondCard","setSecondCard","countFinish","setCountFinish","countTry","setCountTry","show","setShow","links","english","setEnglish","showMemory","setShowMemory","cardImg","current","parallax","shuffle","sort","Math","random","flipCard","e","currentTarget","classList","add","currentCard","dataset","card","currentSame","same","checkForMatch","isMatch","disabledCards","unFlipCards","setTimeout","remove","bannerMemory","map","memory","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport '../../../assets/css/memory-style.css';\nimport { imagesGame, imageFront, imagesGameEnglish } from '../../../data/memoryGameData';\n\nimport ModalFinish from \"../question/ModalFinish\";\nimport {useRecoilValue} from \"recoil\";\nimport {linksSvg} from \"../../../GlobalState\";\n\nimport Parallax from 'parallax-js'\n\nimport GameBoard from './GameBoard';\n\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\n\nfunction Memoryboard() {\n  const [imagesMemory, setImagesMemory] = useState([]);\n  const [image, setImage] = useState('');\n\n  const [hasFlippedCard, setHasFlippedCard] = useState(false);\n  const [firstCard, setFirstCard] = useState('');\n  const [firstEventCard, setFirstEventCard] = useState('');\n  const [firstSameCard, setFirstSameCard] = useState('');\n  const [secondCard, setSecondCard] = useState('');\n\n  const [countFinish, setCountFinish] = useState(6);\n  const [countTry, setCountTry] = useState(0);\n  const [show, setShow] = useState(true);\n  const links = useRecoilValue(linksSvg);\n\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n\n\n  const cardImg = useRef();\n\n  useEffect(()=>{\n  },[countFinish])\n\n  useEffect(()=>{\n    if(cardImg.current){\n      const parallax = new Parallax(cardImg.current);\n    }\n    setImage(imageFront);\n    let shuffle;\n    if(english){\n      shuffle = imagesGameEnglish.sort(() => Math.random() - 0.5)\n    }else{\n      shuffle = imagesGame.sort(() => Math.random() - 0.5)\n    }\n    setImagesMemory(shuffle);\n  },[english])\n\n  const flipCard = (e) =>{\n    e.currentTarget.classList.add('flip');\n    const currentTarget = e.currentTarget;\n    const currentCard = e.currentTarget.dataset.card;\n    const currentSame = e.currentTarget.dataset.same;\n    setFirstSameCard(e.currentTarget.dataset.same);\n    setFirstEventCard(e.currentTarget);\n\n    if(!hasFlippedCard){\n      setHasFlippedCard(true);\n      setFirstCard(currentCard);\n      //console.log(true, e.currentTarget)\n    }else{\n      setHasFlippedCard(false);\n      setSecondCard(currentCard);\n      //console.log(firstCard, currentCard)\n      setCountTry(countTry + 1);\n      checkForMatch(firstCard,currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard)\n\n    }\n  }\n\n\n  const checkForMatch = (firstCard,currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard) =>{\n    let isMatch = (firstCard === currentCard) && (currentSame !== firstSameCard);\n    isMatch ? disabledCards(firstEventCard, e) : unFlipCards(firstEventCard,currentTarget);\n  }\n\n  const disabledCards = (firstEventCard, e) =>{\n    // hay coincidencia\n    if((countFinish - 1) === 0){\n      setTimeout(()=>{\n        setCountFinish( countFinish - 1);\n      }, 1500)\n    }else {\n      setCountFinish( countFinish - 1);\n    }\n    firstEventCard.classList.add('inactive-card');\n    e.currentTarget.classList.add('inactive-card');\n  };\n\n  const unFlipCards = (firstEventCard,currentTarget) =>{\n    setTimeout(()=>{\n      firstEventCard.classList.remove('flip');\n      currentTarget.classList.remove('flip');\n    }, 1000)\n  };\n\n  return (\n\n    <div className=\"animate__animated animate__fadeIn  animate__duration-3s\">\n      <h1 className=\"text-center text-capitalize mt-2 \">\n          <span className={`font-weight-bold text-title-span-title mr-2 \n         color-5\n          `}>\n            {\n              english ? 'Focus': 'ConcÃ©ntrese'\n            }\n\n          </span>\n      </h1>\n\n     <CheckBoxLanguage\n       setEnglish={setEnglish}\n       english={english}\n       setShowMemory={setShowMemory}\n     />\n\n\n      <div>\n        <div ref={cardImg}>\n          <img\n            data-depth=\"0.1\"\n            src={links[5].bannerMemory}\n            className=\"center-img-memory rounded\"/>\n        </div>\n\n      </div>\n      <div className=\"body-memory mt-4\">\n        {\n          showMemory && (\n            <section className=\"memory-game animate__animated animate__fadeIn  animate__duration-3s\">\n              {\n                imagesMemory.map((memory, i)=>{\n                  return(\n\n                    <GameBoard\n                      flipCard={flipCard}\n                      memory={memory}\n                      image={image}\n                      key={i}\n                      i={i}/>\n                  )\n                })\n              }\n            </section>\n\n          )\n        }\n\n        {\n          countFinish === 0 && (\n            <ModalFinish\n              howManyTimes={countTry}\n              show={show}\n              setShow={setShow}/>\n          )\n        }\n      </div>\n    </div>\n\n  );\n}\n\nexport default Memoryboard;\n"]},"metadata":{},"sourceType":"module"}