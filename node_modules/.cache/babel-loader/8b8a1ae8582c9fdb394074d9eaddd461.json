{"ast":null,"code":"var _jsxFileName = \"/Users/musicprogram/Desktop/book interactive/src/components/games/question/QuestionMultipleAnswer.js\";\nimport React, { Fragment, useEffect, useState, useRef } from 'react';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport Question from \"./Question\";\nimport ModalFinish from \"./ModalFinish\";\nimport { myQuestions, myQuestionsEnglish } from '../../../data/question_data';\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { categoryNavigation, linksSvg } from \"../../../GlobalState\";\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\nimport { imagesGameEnglish } from \"../../../data/memoryGameData\";\n\nfunction AlphabetSoupComponent() {\n  const [questions, setQuestions] = useState(myQuestions);\n  const [newAnswers, setNewAnswers] = useState([]);\n  const [missingInfo, setMissingInfo] = useState(true);\n  const [isComplete, setIsComplete] = useState(false);\n  const [show, setShow] = useState(true);\n  const [clicks, setClicks] = useState(0);\n  const links = useRecoilValue(linksSvg);\n  const [category, setCategory] = useRecoilState(categoryNavigation);\n  const [howManyTimes, setHowManyTimes] = useState(0);\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n  const list = useRef();\n  useEffect(() => {\n    let shuffle;\n\n    if (english) {\n      shuffle = myQuestionsEnglish.sort(() => Math.random() - 0.6);\n      setQuestions(shuffle);\n    } else {\n      shuffle = myQuestions.sort(() => Math.random() - 0.6);\n      setQuestions(shuffle);\n    }\n\n    setQuestions(shuffle);\n  }, [english]);\n\n  const handleSubmit = () => {\n    let quantityClicks = clicks + 1;\n    setClicks(quantityClicks);\n    let validateArr = [];\n    let obj = {};\n    newAnswers.map((answer, i) => {\n      questions.map((question, i) => {\n        if (answer.question === question.id) {\n          if (answer.answer === question.correctAnswer) {\n            changeStyles(`check-${question.id}`, \"black\");\n            obj = {\n              question: answer.question,\n              correct: true\n            };\n            validateArr.push(obj);\n          } else {\n            changeStyles(`check-${question.id}`, \"red\", \"bold\");\n            obj = {\n              question: answer.question,\n              correct: false\n            };\n            validateArr.push(obj);\n          }\n        }\n      });\n    });\n    const arr = validateArr.find(question => question.correct === false); //console.log(arr);\n\n    if (arr) {\n      setIsComplete(false);\n    } else {\n      setIsComplete(true);\n      setShow(true);\n    }\n\n    setHowManyTimes(howManyTimes + 1);\n  };\n\n  const changeStyles = (css, color, bold) => {\n    let x = document.getElementsByClassName(css);\n    let i;\n\n    for (i = 0; i < x.length; i++) {\n      x[i].style.color = color;\n\n      if (bold) {\n        x[i].style.fontWeight = 'bold';\n      } else {\n        x[i].style.fontWeight = '';\n      }\n    }\n  };\n\n  const handleChange = e => {\n    setIsComplete(false);\n    let question = parseInt(e.target.name);\n    let answer = parseInt(e.target.value);\n    const obj = {\n      question,\n      answer\n    };\n    let newAnswer = newAnswers;\n    newAnswer = newAnswer.filter(function (el) {\n      return el.question !== question;\n    });\n    newAnswer.push(obj);\n    setNewAnswers(newAnswer);\n\n    if (newAnswer.length === questions.length) {\n      setMissingInfo(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container animate__animated animate__fadeIn  animate__duration-3s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center text-capitalize mt-2 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `font-weight-bold text-title-span-title mr-2\n         color-3\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, english ? 'Multiple choice\\n' : 'SelecciÃ³n Multiple')), /*#__PURE__*/React.createElement(CheckBoxLanguage, {\n    setEnglish: setEnglish,\n    english: english,\n    setShowMemory: setShowMemory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), showMemory && /*#__PURE__*/React.createElement(\"div\", {\n    className: \" mb-4 pb-4 pt-4 pl-4 animate__animated animate__fadeIn  animate__duration-3s\",\n    ref: list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    columnsCountBreakPoints: {\n      350: 1,\n      600: 2,\n      900: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Masonry, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, questions.map((quiz, i) => {\n    return /*#__PURE__*/React.createElement(Question, {\n      howManyTimes: howManyTimes,\n      handleChange: handleChange,\n      category: category,\n      quiz: quiz,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 23\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: links[0].bannerQuestion,\n    className: \"center-img-modal bg-light rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    type: \"button\",\n    disabled: missingInfo,\n    className: `btn btn-lg btn-block text-white mt-2 btn-dark`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, isComplete ? 'Muy Bien' : 'Enviar'), isComplete && /*#__PURE__*/React.createElement(ModalFinish, {\n    howManyTimes: howManyTimes,\n    clicks: clicks,\n    show: show,\n    setShow: setShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default AlphabetSoupComponent;","map":{"version":3,"sources":["/Users/musicprogram/Desktop/book interactive/src/components/games/question/QuestionMultipleAnswer.js"],"names":["React","Fragment","useEffect","useState","useRef","Masonry","ResponsiveMasonry","Question","ModalFinish","myQuestions","myQuestionsEnglish","useRecoilState","useRecoilValue","categoryNavigation","linksSvg","CheckBoxLanguage","imagesGameEnglish","AlphabetSoupComponent","questions","setQuestions","newAnswers","setNewAnswers","missingInfo","setMissingInfo","isComplete","setIsComplete","show","setShow","clicks","setClicks","links","category","setCategory","howManyTimes","setHowManyTimes","english","setEnglish","showMemory","setShowMemory","list","shuffle","sort","Math","random","handleSubmit","quantityClicks","validateArr","obj","map","answer","i","question","id","correctAnswer","changeStyles","correct","push","arr","find","css","color","bold","x","document","getElementsByClassName","length","style","fontWeight","handleChange","e","parseInt","target","name","value","newAnswer","filter","el","quiz","bannerQuestion"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect, useState, useRef} from 'react';\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\n\nimport Question from \"./Question\";\n\nimport ModalFinish from \"./ModalFinish\";\n\nimport {myQuestions, myQuestionsEnglish} from '../../../data/question_data'\nimport {useRecoilState, useRecoilValue} from \"recoil\";\nimport {categoryNavigation, linksSvg} from \"../../../GlobalState\";\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\nimport {imagesGameEnglish} from \"../../../data/memoryGameData\";\n\n\nfunction AlphabetSoupComponent() {\n  const [questions,setQuestions] = useState(myQuestions);\n  const [newAnswers,setNewAnswers] = useState([]);\n  const [missingInfo, setMissingInfo] = useState(true);\n  const [isComplete, setIsComplete] = useState(false);\n  const [show, setShow] = useState(true);\n  const [clicks, setClicks] = useState(0);\n  const links = useRecoilValue(linksSvg);\n\n\n  const [category, setCategory] = useRecoilState(categoryNavigation);\n\n\n  const [howManyTimes, setHowManyTimes] = useState(0);\n\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n\n\n  const list = useRef()\n\n\n  useEffect(()=>{\n    let shuffle;\n    if(english){\n      shuffle = myQuestionsEnglish.sort(() => Math.random() - 0.6);\n      setQuestions(shuffle);\n    }else{\n      shuffle = myQuestions.sort(() => Math.random() - 0.6);\n      setQuestions(shuffle);\n    }\n\n    setQuestions(shuffle);\n  },[english]);\n\n  const handleSubmit = ()=>{\n    let quantityClicks = clicks + 1;\n    setClicks(quantityClicks);\n    let validateArr = []\n    let obj = {}\n\n    newAnswers.map((answer,i)=>{\n      questions.map((question,i)=>{\n        if(answer.question === question.id){\n         if(answer.answer === question.correctAnswer){\n           changeStyles(`check-${question.id}`, \"black\");\n           obj = {\n             question: answer.question,\n             correct: true\n           }\n           validateArr.push(obj);\n         }else{\n           changeStyles(`check-${question.id}`, \"red\", \"bold\");\n           obj = {\n             question: answer.question,\n             correct: false\n           }\n           validateArr.push(obj);\n         }\n        }\n      })\n    })\n\n\n    const arr = validateArr.find(question => question.correct === false);\n    //console.log(arr);\n    if(arr){\n      setIsComplete(false);\n    }else{\n      setIsComplete(true);\n      setShow(true);\n    }\n    setHowManyTimes(howManyTimes + 1);\n  }\n\n  const changeStyles = (css, color, bold) =>{\n    let x = document.getElementsByClassName(css);\n    let i;\n    for (i = 0; i < x.length; i++) {\n      x[i].style.color = color;\n      if(bold){\n        x[i].style.fontWeight = 'bold';\n      }else{\n        x[i].style.fontWeight = '';\n      }\n\n    }\n  }\n\n  const handleChange = (e) =>{\n    setIsComplete(false);\n    let question = parseInt(e.target.name);\n    let answer = parseInt(e.target.value);\n\n    const obj = {\n      question,\n      answer\n    }\n    let newAnswer = newAnswers;\n\n    newAnswer = newAnswer.filter(function(el){\n      return el.question !== question;\n    });\n\n    newAnswer.push(obj);\n    setNewAnswers(newAnswer);\n\n    if(newAnswer.length === questions.length){\n      setMissingInfo(false);\n    }\n\n  }\n\n  return (\n    <div className=\"container animate__animated animate__fadeIn  animate__duration-3s\">\n      <h1 className=\"text-center text-capitalize mt-2 mb-3\">\n          <span className={`font-weight-bold text-title-span-title mr-2\n         color-3\n          `}>\n            {\n              english ? 'Multiple choice\\n': 'SelecciÃ³n Multiple'\n            }\n\n          </span>\n      </h1>\n\n      <CheckBoxLanguage\n        setEnglish={setEnglish}\n        english={english}\n        setShowMemory={setShowMemory}\n      />\n\n\n      {\n        showMemory && (\n\n          <div className=\" mb-4 pb-4 pt-4 pl-4 animate__animated animate__fadeIn  animate__duration-3s\" ref={list}>\n            <ResponsiveMasonry\n              columnsCountBreakPoints={{350: 1, 600: 2, 900: 3}}\n            >\n              <Masonry>\n                {\n                  questions.map((quiz, i)=>{\n                    return(\n                      <Question\n                        howManyTimes={howManyTimes}\n                        handleChange={handleChange}\n                        category={category}\n                        quiz={quiz}/>\n                    )\n                  })\n                }\n              </Masonry>\n            </ResponsiveMasonry>\n            <div>\n              <img src={links[0].bannerQuestion} className=\"center-img-modal bg-light rounded\"/>\n            </div>\n            <button\n              onClick={handleSubmit}\n              type=\"button\"\n              disabled={missingInfo}\n              className={`btn btn-lg btn-block text-white mt-2 btn-dark`}>\n              {isComplete ? 'Muy Bien' : 'Enviar'}\n            </button>\n            {\n              isComplete && (\n                <ModalFinish\n                  howManyTimes={howManyTimes}\n                  clicks={clicks}\n                  show={show}\n                  setShow={setShow}/>\n              )\n            }\n\n          </div>\n\n        )\n      }\n\n\n    </div>\n  );\n}\n\nexport default AlphabetSoupComponent;\n"]},"metadata":{},"sourceType":"module"}