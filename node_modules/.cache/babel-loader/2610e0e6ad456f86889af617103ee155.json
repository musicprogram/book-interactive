{"ast":null,"code":"var _jsxFileName = \"/Users/musicprogram/Documents/book interactive/src/components/games/complete_information/CompleteBoard.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { completeInformationData, talkAnimation, completeInformationDataEnglish } from '../../../data/CompleteInformationData';\nimport Helmet from 'react-helmet';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport ModalFinish from \"../question/ModalFinish\";\nimport Complete from \"./Complete\";\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport { useRecoilValue } from \"recoil\";\nimport { linksSvg } from \"../../../GlobalState\";\nimport CheckBoxSpeech from './CheckBoxSpeech';\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\nimport { imagesGame, imagesGameEnglish } from \"../../../data/memoryGameData\";\nimport Help from \"../../help_introduction/Help\";\n\nfunction CompleteBoard() {\n  const [completeInformations, setCompleteInformations] = useState(completeInformationData);\n  const [body, setBody] = useState('');\n  const [word, setWord] = useState('');\n  const [wordState, setWordState] = useState({\n    word: '',\n    id: 0\n  });\n  const links = useRecoilValue(linksSvg);\n  const [isOver, setIsOver] = useState(false);\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [show, setShow] = useState(true);\n  const [clicks, setClicks] = useState(0);\n  const [workingSpeech, setWorkingSpeech] = useState(true);\n  const [inputText, setInputText] = useState({\n    text: '',\n    infoId: '',\n    word: '',\n    body: ''\n  });\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n  const [showHelp, setShowHelp] = useState(false);\n  useEffect(() => {\n    setBody(completeInformationData[0].imgCss);\n  }, []);\n  useEffect(() => {\n    let shuffle;\n\n    if (english) {\n      shuffle = completeInformationDataEnglish.sort(() => Math.random() - 0.3);\n    } else {\n      shuffle = completeInformationData.sort(() => Math.random() - 0.3);\n    }\n\n    setCompleteInformations(shuffle);\n  }, [english]);\n  useEffect(() => {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert('No hay soporte');\n    }\n\n    if (transcript) {\n      //console.log(transcript);\n      setWord(transcript);\n      compareWord(transcript);\n    }\n\n    if (inputText.text && inputText.text === inputText.word && inputText.word) {\n      compareText();\n    }\n  }, [transcript, inputText]);\n\n  const compareText = () => {\n    setBody(inputText.body);\n    const updateCompleteInformations = [];\n    completeInformations.map(info => {\n      if (inputText.infoId === info.id) {\n        info.solve = true;\n      }\n\n      updateCompleteInformations.push(info);\n    });\n    const result = updateCompleteInformations.filter(info => info.solve === true);\n    setIsOver(result.length === completeInformations.length);\n    setCompleteInformations(updateCompleteInformations);\n  };\n\n  const compareWord = word => {\n    let updateCompleteInformations = [];\n    let comp = false;\n    comp = word && wordState.word && word === wordState.word;\n\n    if (comp) {\n      completeInformations.map(info => {\n        if (wordState.id === info.id) {\n          info.solve = true;\n          info.imgTalk = talkAnimation[0].img1;\n        }\n\n        updateCompleteInformations.push(info);\n      });\n      const result = updateCompleteInformations.filter(info => info.solve === true);\n      setIsOver(result.length === completeInformations.length);\n      setCompleteInformations(updateCompleteInformations);\n    } else {\n      completeInformations.map(info => {\n        if (wordState.id === info.id) {\n          info.solve = false;\n          info.imgTalk = talkAnimation[0].img4;\n        }\n\n        updateCompleteInformations.push(info);\n      });\n      setCompleteInformations(updateCompleteInformations);\n    }\n  };\n\n  const speech = () => {\n    SpeechRecognition.startListening();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-complete animate__animated animate__fadeIn  animate__duration-3s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 12\n    }\n  }, `\n                .background-complete {\n                    background-color: #780116 !important;\n                    background-image : url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.08'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\"),  \n                     url(\"${body}\")\n                }\n             `)), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center text-capitalize mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `font-weight-bold text-title-span-title mr-2 \n         color-2\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, english ? 'Complete' : 'Completar')), /*#__PURE__*/React.createElement(CheckBoxSpeech, {\n    setWorkingSpeech: setWorkingSpeech,\n    workingSpeech: workingSpeech,\n    setInputText: setInputText,\n    english: english,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CheckBoxLanguage, {\n    setEnglish: setEnglish,\n    english: english,\n    setShowMemory: setShowMemory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, showMemory && /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    className: \"animate__animated animate__fadeIn  animate__duration-3s\",\n    columnsCountBreakPoints: {\n      350: 1,\n      600: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Masonry, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }, completeInformations.map((info, i) => {\n    return /*#__PURE__*/React.createElement(Complete, {\n      info: info,\n      key: i,\n      setBody: setBody,\n      setWordState: setWordState,\n      speechRecognition: speech,\n      workingSpeech: workingSpeech,\n      setInputText: setInputText,\n      english: english,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 27\n      }\n    });\n  }))))), isOver && /*#__PURE__*/React.createElement(ModalFinish, {\n    show: show,\n    setShow: setShow,\n    clicks: clicks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 12\n    }\n  }), showHelp && /*#__PURE__*/React.createElement(Help, {\n    setShowHelp: setShowHelp,\n    showHelp: showHelp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 12\n    }\n  }));\n}\n\nexport default CompleteBoard;","map":{"version":3,"sources":["/Users/musicprogram/Documents/book interactive/src/components/games/complete_information/CompleteBoard.js"],"names":["React","useEffect","useState","useRef","completeInformationData","talkAnimation","completeInformationDataEnglish","Helmet","SpeechRecognition","useSpeechRecognition","ModalFinish","Complete","Masonry","ResponsiveMasonry","useRecoilValue","linksSvg","CheckBoxSpeech","CheckBoxLanguage","imagesGame","imagesGameEnglish","Help","CompleteBoard","completeInformations","setCompleteInformations","body","setBody","word","setWord","wordState","setWordState","id","links","isOver","setIsOver","transcript","resetTranscript","show","setShow","clicks","setClicks","workingSpeech","setWorkingSpeech","inputText","setInputText","text","infoId","english","setEnglish","showMemory","setShowMemory","showHelp","setShowHelp","imgCss","shuffle","sort","Math","random","browserSupportsSpeechRecognition","alert","compareWord","compareText","updateCompleteInformations","map","info","solve","push","result","filter","length","comp","imgTalk","img1","img4","speech","startListening","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAkD,OAAlD;AACA,SAAQC,uBAAR,EAAiCC,aAAjC,EAAgDC,8BAAhD,QAAqF,uCAArF;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,0BAAxD;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,IAAiBC,iBAAjB,QAAyC,0BAAzC;AACA,SAAQC,cAAR,QAA6B,QAA7B;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAAQC,UAAR,EAAoBC,iBAApB,QAA4C,8BAA5C;AACA,OAAOC,IAAP,MAAiB,8BAAjB;;AAEA,SAASC,aAAT,GAAyB;AACvB,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDrB,QAAQ,CAACE,uBAAD,CAAhE;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC;AACzCwB,IAAAA,IAAI,EAAE,EADmC;AAEzCI,IAAAA,EAAE,EAAE;AAFqC,GAAD,CAA1C;AAIA,QAAMC,KAAK,GAAGjB,cAAc,CAACC,QAAD,CAA5B;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsB/B,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAM;AAAEgC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAkC1B,oBAAoB,EAA5D;AAEA,QAAM,CAAC2B,IAAD,EAAOC,OAAP,IAAkBnC,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACoC,MAAD,EAASC,SAAT,IAAsBrC,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAM,CAACsC,aAAD,EAAgBC,gBAAhB,IAAoCvC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACwC,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC;AACzC0C,IAAAA,IAAI,EAAG,EADkC;AAEzCC,IAAAA,MAAM,EAAG,EAFgC;AAGzCnB,IAAAA,IAAI,EAAE,EAHmC;AAIzCF,IAAAA,IAAI,EAAE;AAJmC,GAAD,CAA1C;AAMA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwB7C,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC8C,UAAD,EAAaC,aAAb,IAA8B/C,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACgD,QAAD,EAAWC,WAAX,IAA0BjD,QAAQ,CAAC,KAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZwB,IAAAA,OAAO,CAACrB,uBAAuB,CAAC,CAAD,CAAvB,CAA2BgD,MAA5B,CAAP;AACD,GAFQ,EAEP,EAFO,CAAT;AAKAnD,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIoD,OAAJ;;AACA,QAAGP,OAAH,EAAW;AACTO,MAAAA,OAAO,GAAG/C,8BAA8B,CAACgD,IAA/B,CAAoC,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA1D,CAAV;AACD,KAFD,MAEK;AACHH,MAAAA,OAAO,GAAGjD,uBAAuB,CAACkD,IAAxB,CAA6B,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAnD,CAAV;AACD;;AACDjC,IAAAA,uBAAuB,CAAC8B,OAAD,CAAvB;AACD,GARQ,EAQP,CAACP,OAAD,CARO,CAAT;AAUA7C,EAAAA,SAAS,CAAC,MAAI;AAEZ,QAAI,CAACO,iBAAiB,CAACiD,gCAAlB,EAAL,EAA2D;AACzDC,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;;AAEH,QAAGxB,UAAH,EAAc;AACZ;AACAP,MAAAA,OAAO,CAACO,UAAD,CAAP;AACAyB,MAAAA,WAAW,CAACzB,UAAD,CAAX;AACD;;AAED,QACEQ,SAAS,CAACE,IAAV,IACAF,SAAS,CAACE,IAAV,KAAmBF,SAAS,CAAChB,IAD7B,IAEAgB,SAAS,CAAChB,IAHZ,EAGiB;AACbkC,MAAAA,WAAW;AACd;AAEA,GAnBQ,EAmBP,CAAC1B,UAAD,EAAaQ,SAAb,CAnBO,CAAT;;AAqBA,QAAMkB,WAAW,GAAG,MAAK;AACvBnC,IAAAA,OAAO,CAACiB,SAAS,CAAClB,IAAX,CAAP;AACA,UAAMqC,0BAA0B,GAAG,EAAnC;AAEAvC,IAAAA,oBAAoB,CAACwC,GAArB,CAA0BC,IAAD,IAAQ;AAC/B,UAAGrB,SAAS,CAACG,MAAV,KAAqBkB,IAAI,CAACjC,EAA7B,EAAgC;AAC9BiC,QAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACD;;AACDH,MAAAA,0BAA0B,CAACI,IAA3B,CAAgCF,IAAhC;AACD,KALD;AAOA,UAAMG,MAAM,GAAGL,0BAA0B,CAACM,MAA3B,CAAkCJ,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,IAAzD,CAAf;AACA/B,IAAAA,SAAS,CAACiC,MAAM,CAACE,MAAP,KAAkB9C,oBAAoB,CAAC8C,MAAxC,CAAT;AAEA7C,IAAAA,uBAAuB,CAACsC,0BAAD,CAAvB;AAED,GAhBD;;AAkBA,QAAMF,WAAW,GAAIjC,IAAD,IAAS;AAC3B,QAAImC,0BAA0B,GAAG,EAAjC;AAEE,QAAIQ,IAAI,GAAG,KAAX;AAEAA,IAAAA,IAAI,GAAI3C,IAAI,IAAIE,SAAS,CAACF,IAAnB,IAA6BA,IAAI,KAAKE,SAAS,CAACF,IAAvD;;AAGA,QAAG2C,IAAH,EAAQ;AAEN/C,MAAAA,oBAAoB,CAACwC,GAArB,CAA0BC,IAAD,IAAQ;AAC/B,YAAGnC,SAAS,CAACE,EAAV,KAAiBiC,IAAI,CAACjC,EAAzB,EAA4B;AAC1BiC,UAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACAD,UAAAA,IAAI,CAACO,OAAL,GAAejE,aAAa,CAAC,CAAD,CAAb,CAAiBkE,IAAhC;AACD;;AACDV,QAAAA,0BAA0B,CAACI,IAA3B,CAAgCF,IAAhC;AACD,OAND;AAQA,YAAMG,MAAM,GAAGL,0BAA0B,CAACM,MAA3B,CAAkCJ,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,IAAzD,CAAf;AACA/B,MAAAA,SAAS,CAACiC,MAAM,CAACE,MAAP,KAAkB9C,oBAAoB,CAAC8C,MAAxC,CAAT;AAEA7C,MAAAA,uBAAuB,CAACsC,0BAAD,CAAvB;AACD,KAdD,MAcK;AACHvC,MAAAA,oBAAoB,CAACwC,GAArB,CAA0BC,IAAD,IAAQ;AAC/B,YAAGnC,SAAS,CAACE,EAAV,KAAiBiC,IAAI,CAACjC,EAAzB,EAA4B;AAC1BiC,UAAAA,IAAI,CAACC,KAAL,GAAa,KAAb;AACAD,UAAAA,IAAI,CAACO,OAAL,GAAejE,aAAa,CAAC,CAAD,CAAb,CAAiBmE,IAAhC;AACD;;AACDX,QAAAA,0BAA0B,CAACI,IAA3B,CAAgCF,IAAhC;AACD,OAND;AAQAxC,MAAAA,uBAAuB,CAACsC,0BAAD,CAAvB;AACD;AAEJ,GAlCD;;AAoCA,QAAMY,MAAM,GAAG,MAAI;AACjBjE,IAAAA,iBAAiB,CAACkE,cAAlB;AACD,GAFD;;AAIA,sBACG;AAAK,IAAA,SAAS,EAAC,6EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;;;;4BAIalD,IAAK;;cALtB,CAJF,CADF,eAgBE;AAAI,IAAA,SAAS,EAAC,kCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAM,IAAA,SAAS,EAAG;;WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGsB,OAAO,GAAG,UAAH,GAAgB,WAH1B,CADD,CAhBF,eAwBG,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAEL,gBADpB;AAEE,IAAA,aAAa,EAAED,aAFjB;AAGE,IAAA,YAAY,EAAEG,YAHhB;AAIE,IAAA,OAAO,EAAEG,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBH,eA+BE,oBAAC,gBAAD;AACE,IAAA,UAAU,EAAEC,UADd;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,aAAa,EAAEG,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BF,eAwCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEID,UAAU,iBACR,oBAAC,iBAAD;AACE,IAAA,SAAS,EAAC,yDADZ;AAEE,IAAA,uBAAuB,EAAE;AAAC,WAAK,CAAN;AAAS,WAAK;AAAd,KAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI1B,oBAAoB,CAACwC,GAArB,CAAyB,CAACC,IAAD,EAAOY,CAAP,KAAW;AAClC,wBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEZ,IADR;AAEE,MAAA,GAAG,EAAEY,CAFP;AAGE,MAAA,OAAO,EAAElD,OAHX;AAIE,MAAA,YAAY,EAAEI,YAJhB;AAKE,MAAA,iBAAiB,EAAE4C,MALrB;AAME,MAAA,aAAa,EAAEjC,aANjB;AAOE,MAAA,YAAY,EAAEG,YAPhB;AAQE,MAAA,OAAO,EAAEG,OARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD,GAbD,CAFJ,CAJF,CAHN,CAxCH,CADF,EA4EId,MAAM,iBACJ,oBAAC,WAAD;AACE,IAAA,IAAI,EAAEI,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,MAAM,EAAEC,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7EN,EAsFIY,QAAQ,iBACN,oBAAC,IAAD;AACG,IAAA,WAAW,EAAEC,WADhB;AAEG,IAAA,QAAQ,EAAED,QAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvFN,CADH;AAiGD;;AAED,eAAe7B,aAAf","sourcesContent":["import React, { useEffect, useState, useRef} from 'react';\nimport {completeInformationData, talkAnimation, completeInformationDataEnglish} from '../../../data/CompleteInformationData';\nimport Helmet from 'react-helmet';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport ModalFinish from \"../question/ModalFinish\";\n\nimport Complete from \"./Complete\";\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\nimport {useRecoilValue} from \"recoil\";\nimport {linksSvg} from \"../../../GlobalState\";\n\nimport CheckBoxSpeech from './CheckBoxSpeech';\n\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\nimport {imagesGame, imagesGameEnglish} from \"../../../data/memoryGameData\";\nimport Help from \"../../help_introduction/Help\";\n\nfunction CompleteBoard() {\n  const [completeInformations, setCompleteInformations] = useState(completeInformationData);\n  const [body, setBody] = useState('');\n  const [word, setWord] = useState('');\n  const [wordState, setWordState] = useState({\n    word: '',\n    id: 0\n  });\n  const links = useRecoilValue(linksSvg);\n  const [isOver, setIsOver] = useState(false);\n\n  const { transcript, resetTranscript } = useSpeechRecognition();\n\n  const [show, setShow] = useState(true);\n  const [clicks, setClicks] = useState(0);\n\n  const [workingSpeech, setWorkingSpeech] = useState(true);\n  const [inputText, setInputText] = useState({\n    text : '',\n    infoId : '',\n    word: '',\n    body: ''\n  });\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n  const [showHelp, setShowHelp] = useState(false);\n\n  useEffect(()=>{\n    setBody(completeInformationData[0].imgCss);\n  },[])\n\n\n  useEffect(()=>{\n    let shuffle;\n    if(english){\n      shuffle = completeInformationDataEnglish.sort(() => Math.random() - 0.3)\n    }else{\n      shuffle = completeInformationData.sort(() => Math.random() - 0.3)\n    }\n    setCompleteInformations(shuffle);\n  },[english])\n\n  useEffect(()=>{\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert('No hay soporte')\n    }\n\n  if(transcript){\n    //console.log(transcript);\n    setWord(transcript);\n    compareWord(transcript);\n  }\n\n  if(\n    inputText.text &&\n    inputText.text === inputText.word &&\n    inputText.word){\n      compareText()\n  }\n\n  },[transcript, inputText]);\n\n  const compareText = () =>{\n    setBody(inputText.body)\n    const updateCompleteInformations = []\n\n    completeInformations.map((info)=>{\n      if(inputText.infoId === info.id){\n        info.solve = true;\n      }\n      updateCompleteInformations.push(info)\n    })\n\n    const result = updateCompleteInformations.filter(info => info.solve === true);\n    setIsOver(result.length === completeInformations.length);\n\n    setCompleteInformations(updateCompleteInformations);\n\n  };\n\n  const compareWord = (word) =>{\n    let updateCompleteInformations = [];\n\n      let comp = false;\n\n      comp = (word && wordState.word) && (word === wordState.word);\n\n\n      if(comp){\n\n        completeInformations.map((info)=>{\n          if(wordState.id === info.id){\n            info.solve = true;\n            info.imgTalk = talkAnimation[0].img1\n          }\n          updateCompleteInformations.push(info)\n        })\n\n        const result = updateCompleteInformations.filter(info => info.solve === true);\n        setIsOver(result.length === completeInformations.length);\n\n        setCompleteInformations(updateCompleteInformations);\n      }else{\n        completeInformations.map((info)=>{\n          if(wordState.id === info.id){\n            info.solve = false;\n            info.imgTalk = talkAnimation[0].img4\n          }\n          updateCompleteInformations.push(info)\n        })\n\n        setCompleteInformations(updateCompleteInformations);\n      }\n\n  }\n\n  const speech = ()=>{\n    SpeechRecognition.startListening()\n  }\n\n  return (\n     <div className=\"background-complete animate__animated animate__fadeIn  animate__duration-3s\">\n       <div className=\"container \">\n         <Helmet>\n           {/* Define inline CSS for body tag */}\n           <body/>\n           {/* Or include in-file CSS */}\n           <style>\n             {`\n                .background-complete {\n                    background-color: #780116 !important;\n                    background-image : url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.08'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\"),  \n                     url(\"${body}\")\n                }\n             `}\n           </style>\n         </Helmet>\n\n         <h1 className=\"text-center text-capitalize mt-2\">\n          <span className={`font-weight-bold text-title-span-title mr-2 \n         color-2\n          `}>\n            {english ? 'Complete' : 'Completar'}\n          </span>\n         </h1>\n\n          <CheckBoxSpeech\n            setWorkingSpeech={setWorkingSpeech}\n            workingSpeech={workingSpeech}\n            setInputText={setInputText}\n            english={english}\n          />\n\n         <CheckBoxLanguage\n           setEnglish={setEnglish}\n           english={english}\n           setShowMemory={setShowMemory}\n\n         />\n\n         \n\n          <div>\n            {\n              showMemory && (\n                <ResponsiveMasonry\n                  className='animate__animated animate__fadeIn  animate__duration-3s'\n                  columnsCountBreakPoints={{350: 1, 600: 2}}\n                >\n                  <Masonry>\n                    {\n                      completeInformations.map((info, i)=>{\n                        return(\n                          <Complete\n                            info={info}\n                            key={i}\n                            setBody={setBody}\n                            setWordState={setWordState}\n                            speechRecognition={speech}\n                            workingSpeech={workingSpeech}\n                            setInputText={setInputText}\n                            english={english}\n                          />\n                        )\n                      })\n                    }\n                  </Masonry>\n                </ResponsiveMasonry>\n              )\n            }\n\n\n          </div>\n\n       </div>\n\n       {\n         isOver && (\n           <ModalFinish\n             show={show}\n             setShow={setShow}\n             clicks={clicks}\n           />\n         )\n       }\n\n       {\n         showHelp && (\n           <Help\n              setShowHelp={setShowHelp}\n              showHelp={showHelp}\n           />\n         )\n\n       }\n     </div>\n  );\n}\n\nexport default CompleteBoard;\n"]},"metadata":{},"sourceType":"module"}