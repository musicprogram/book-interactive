{"ast":null,"code":"import _slicedToArray from\"/Users/musicprogram/Documents/book interactive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import'../../../assets/css/memory-style.css';import{imagesGame,imageFront,imagesGameEnglish}from'../../../data/memoryGameData';import ModalFinish from\"../question/ModalFinish\";import{useRecoilValue}from\"recoil\";import{linksSvg}from\"../../../GlobalState\";import Parallax from'parallax-js';import GameBoard from'./GameBoard';import CheckBoxLanguage from\"../CheckBoxLanguage\";function Memoryboard(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),imagesMemory=_useState2[0],setImagesMemory=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),image=_useState4[0],setImage=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),hasFlippedCard=_useState6[0],setHasFlippedCard=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),firstCard=_useState8[0],setFirstCard=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),firstEventCard=_useState10[0],setFirstEventCard=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),firstSameCard=_useState12[0],setFirstSameCard=_useState12[1];var _useState13=useState(''),_useState14=_slicedToArray(_useState13,2),secondCard=_useState14[0],setSecondCard=_useState14[1];var _useState15=useState(6),_useState16=_slicedToArray(_useState15,2),countFinish=_useState16[0],setCountFinish=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),countTry=_useState18[0],setCountTry=_useState18[1];var _useState19=useState(true),_useState20=_slicedToArray(_useState19,2),show=_useState20[0],setShow=_useState20[1];var links=useRecoilValue(linksSvg);var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),english=_useState22[0],setEnglish=_useState22[1];var _useState23=useState(true),_useState24=_slicedToArray(_useState23,2),showMemory=_useState24[0],setShowMemory=_useState24[1];var cardImg=useRef();useEffect(function(){},[countFinish]);useEffect(function(){if(cardImg.current){var parallax=new Parallax(cardImg.current);}setImage(imageFront);var shuffle;if(english){shuffle=imagesGameEnglish.sort(function(){return Math.random()-0.5;});}else{shuffle=imagesGame.sort(function(){return Math.random()-0.5;});}setImagesMemory(shuffle);},[english]);var flipCard=function flipCard(e){e.currentTarget.classList.add('flip');var currentTarget=e.currentTarget;var currentCard=e.currentTarget.dataset.card;var currentSame=e.currentTarget.dataset.same;setFirstSameCard(e.currentTarget.dataset.same);setFirstEventCard(e.currentTarget);if(!hasFlippedCard){setHasFlippedCard(true);setFirstCard(currentCard);//console.log(true, e.currentTarget)\n}else{setHasFlippedCard(false);setSecondCard(currentCard);//console.log(firstCard, currentCard)\nsetCountTry(countTry+1);checkForMatch(firstCard,currentCard,currentSame,firstSameCard,e,currentTarget,firstEventCard);}};var checkForMatch=function checkForMatch(firstCard,currentCard,currentSame,firstSameCard,e,currentTarget,firstEventCard){var isMatch=firstCard===currentCard&&currentSame!==firstSameCard;isMatch?disabledCards(firstEventCard,e):unFlipCards(firstEventCard,currentTarget);};var disabledCards=function disabledCards(firstEventCard,e){// hay coincidencia\nif(countFinish-1===0){setTimeout(function(){setCountFinish(countFinish-1);},1500);}else{setCountFinish(countFinish-1);}firstEventCard.classList.add('inactive-card');e.currentTarget.classList.add('inactive-card');};var unFlipCards=function unFlipCards(firstEventCard,currentTarget){setTimeout(function(){firstEventCard.classList.remove('flip');currentTarget.classList.remove('flip');},1000);};return/*#__PURE__*/React.createElement(\"div\",{className:\"animate__animated animate__fadeIn  animate__duration-3s\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"text-center text-capitalize mt-2 \"},/*#__PURE__*/React.createElement(\"span\",{className:\"font-weight-bold text-title-span-title mr-2 \\n         color-5\\n          \"},english?'Focus':'Conc√©ntrese')),/*#__PURE__*/React.createElement(CheckBoxLanguage,{setEnglish:setEnglish,english:english,setShowMemory:setShowMemory}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{ref:cardImg},/*#__PURE__*/React.createElement(\"img\",{\"data-depth\":\"0.1\",src:links[5].bannerMemory,className:\"center-img-memory rounded\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"body-memory mt-4\"},showMemory&&/*#__PURE__*/React.createElement(\"section\",{className:\"memory-game animate__animated animate__fadeIn  animate__duration-3s\"},imagesMemory.map(function(memory,i){return/*#__PURE__*/React.createElement(GameBoard,{flipCard:flipCard,memory:memory,image:image,key:i,i:i});})),countFinish===0&&/*#__PURE__*/React.createElement(ModalFinish,{howManyTimes:countTry,show:show,setShow:setShow})));}export default Memoryboard;","map":{"version":3,"sources":["/Users/musicprogram/Documents/book interactive/src/components/games/memory_game/MemoryBoard.js"],"names":["React","useState","useEffect","useRef","imagesGame","imageFront","imagesGameEnglish","ModalFinish","useRecoilValue","linksSvg","Parallax","GameBoard","CheckBoxLanguage","Memoryboard","imagesMemory","setImagesMemory","image","setImage","hasFlippedCard","setHasFlippedCard","firstCard","setFirstCard","firstEventCard","setFirstEventCard","firstSameCard","setFirstSameCard","secondCard","setSecondCard","countFinish","setCountFinish","countTry","setCountTry","show","setShow","links","english","setEnglish","showMemory","setShowMemory","cardImg","current","parallax","shuffle","sort","Math","random","flipCard","e","currentTarget","classList","add","currentCard","dataset","card","currentSame","same","checkForMatch","isMatch","disabledCards","unFlipCards","setTimeout","remove","bannerMemory","map","memory","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport '../../../assets/css/memory-style.css';\nimport { imagesGame, imageFront, imagesGameEnglish } from '../../../data/memoryGameData';\n\nimport ModalFinish from \"../question/ModalFinish\";\nimport {useRecoilValue} from \"recoil\";\nimport {linksSvg} from \"../../../GlobalState\";\n\nimport Parallax from 'parallax-js'\n\nimport GameBoard from './GameBoard';\n\nimport CheckBoxLanguage from \"../CheckBoxLanguage\";\n\nfunction Memoryboard() {\n  const [imagesMemory, setImagesMemory] = useState([]);\n  const [image, setImage] = useState('');\n\n  const [hasFlippedCard, setHasFlippedCard] = useState(false);\n  const [firstCard, setFirstCard] = useState('');\n  const [firstEventCard, setFirstEventCard] = useState('');\n  const [firstSameCard, setFirstSameCard] = useState('');\n  const [secondCard, setSecondCard] = useState('');\n\n  const [countFinish, setCountFinish] = useState(6);\n  const [countTry, setCountTry] = useState(0);\n  const [show, setShow] = useState(true);\n  const links = useRecoilValue(linksSvg);\n\n  const [english, setEnglish] = useState(false);\n  const [showMemory, setShowMemory] = useState(true);\n\n\n  const cardImg = useRef();\n\n  useEffect(()=>{\n  },[countFinish])\n\n  useEffect(()=>{\n    if(cardImg.current){\n      const parallax = new Parallax(cardImg.current);\n    }\n    setImage(imageFront);\n    let shuffle;\n    if(english){\n      shuffle = imagesGameEnglish.sort(() => Math.random() - 0.5)\n    }else{\n      shuffle = imagesGame.sort(() => Math.random() - 0.5)\n    }\n    setImagesMemory(shuffle);\n  },[english])\n\n  const flipCard = (e) =>{\n    e.currentTarget.classList.add('flip');\n    const currentTarget = e.currentTarget;\n    const currentCard = e.currentTarget.dataset.card;\n    const currentSame = e.currentTarget.dataset.same;\n    setFirstSameCard(e.currentTarget.dataset.same);\n    setFirstEventCard(e.currentTarget);\n\n    if(!hasFlippedCard){\n      setHasFlippedCard(true);\n      setFirstCard(currentCard);\n      //console.log(true, e.currentTarget)\n    }else{\n      setHasFlippedCard(false);\n      setSecondCard(currentCard);\n      //console.log(firstCard, currentCard)\n      setCountTry(countTry + 1);\n      checkForMatch(firstCard,currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard)\n\n    }\n  }\n\n\n  const checkForMatch = (firstCard,currentCard, currentSame, firstSameCard, e, currentTarget, firstEventCard) =>{\n    let isMatch = (firstCard === currentCard) && (currentSame !== firstSameCard);\n    isMatch ? disabledCards(firstEventCard, e) : unFlipCards(firstEventCard,currentTarget);\n  }\n\n  const disabledCards = (firstEventCard, e) =>{\n    // hay coincidencia\n    if((countFinish - 1) === 0){\n      setTimeout(()=>{\n        setCountFinish( countFinish - 1);\n      }, 1500)\n    }else {\n      setCountFinish( countFinish - 1);\n    }\n    firstEventCard.classList.add('inactive-card');\n    e.currentTarget.classList.add('inactive-card');\n  };\n\n  const unFlipCards = (firstEventCard,currentTarget) =>{\n    setTimeout(()=>{\n      firstEventCard.classList.remove('flip');\n      currentTarget.classList.remove('flip');\n    }, 1000)\n  };\n\n  return (\n\n    <div className=\"animate__animated animate__fadeIn  animate__duration-3s\">\n      <h1 className=\"text-center text-capitalize mt-2 \">\n          <span className={`font-weight-bold text-title-span-title mr-2 \n         color-5\n          `}>\n            {\n              english ? 'Focus': 'Conc√©ntrese'\n            }\n\n          </span>\n      </h1>\n\n     <CheckBoxLanguage\n       setEnglish={setEnglish}\n       english={english}\n       setShowMemory={setShowMemory}\n     />\n\n\n      <div>\n        <div ref={cardImg}>\n          <img\n            data-depth=\"0.1\"\n            src={links[5].bannerMemory}\n            className=\"center-img-memory rounded\"/>\n        </div>\n\n      </div>\n      <div className=\"body-memory mt-4\">\n        {\n          showMemory && (\n            <section className=\"memory-game animate__animated animate__fadeIn  animate__duration-3s\">\n              {\n                imagesMemory.map((memory, i)=>{\n                  return(\n\n                    <GameBoard\n                      flipCard={flipCard}\n                      memory={memory}\n                      image={image}\n                      key={i}\n                      i={i}/>\n                  )\n                })\n              }\n            </section>\n\n          )\n        }\n\n        {\n          countFinish === 0 && (\n            <ModalFinish\n              howManyTimes={countTry}\n              show={show}\n              setShow={setShow}/>\n          )\n        }\n      </div>\n    </div>\n\n  );\n}\n\nexport default Memoryboard;\n"]},"metadata":{},"sourceType":"module"}